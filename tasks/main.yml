---
# Include variables and define needed variables.
- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

- name: Include variables for Amazon Linux.
  include_vars: "AmazonLinux.yml"
  when: ansible_distribution == "Amazon" and ansible_distribution_major_version == "NA"

- name: Define apache_packages.
  set_fact:
    apache_packages: "{{ __apache_packages | list }}"
  when: apache_packages is not defined

# Setup/install tasks.
- include: "setup-{{ ansible_os_family }}.yml"
  static: no

# Figure out what version of Apache is installed.
- name: Get installed version of Apache.
  shell: "{{ apache_daemon_path }}{{ apache_daemon }} -v"
  changed_when: false
  check_mode: no
  register: _apache_version

- name: Create apache_version variable.
  set_fact:
    apache_version: "{{ _apache_version.stdout.split()[2].split('/')[1] }}"

- include_vars: apache-22.yml
  when: "apache_version.split('.')[1] == '2'"

- include_vars: apache-24.yml
  when: "apache_version.split('.')[1] == '4'"

- name: Configure Apache.
  lineinfile:
    dest: "{{ apache_conf_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items: "{{ apache_ports_configuration_items }}"
  notify: restart apache

# OS specific Apache configuration.
- include: "configure-{{ ansible_os_family }}.yml"
  static: no

- name: Configure Apache (Add listen port for every vhost).
  blockinfile:
    dest: "{{ apache_conf_file }}"
    insertafter: "^Listen {{ apache_listen_port }}"
    block: "\
    {% set return = joiner(\"\\n\") %}\
    {% for item in apache_vhosts %}\
      {% if item.listenport is defined and apache_listen_port != item.listenport %}\
{{ return() }}Listen {{ item.listenport }}\
      {% endif %}\
    {% endfor %}"
    owner: root
    group: root
    mode: 0644
  notify: restart apache
  when: apache_create_vhosts

- name: Ensure Apache has selected state and enabled on boot.
  service:
    name: "{{ apache_service }}"
    state: "{{ apache_state }}"
    enabled: yes
